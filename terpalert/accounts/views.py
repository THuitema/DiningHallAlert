from django.shortcuts import render, redirect
from django.contrib.auth import login, authenticate, logout
from django.http import HttpResponse, JsonResponse
from .forms import ProfileCreationForm
from django.contrib.auth.forms import AuthenticationForm
from .models import Profile, Alert, Menu
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.core import serializers
from django.views.decorators.csrf import ensure_csrf_cookie


def create_profile(request):
    """
    Handles user signup at /accounts/signup/
    """
    if request.method == 'POST':
        # form was submitted
        form = ProfileCreationForm(request.POST)
        if form.is_valid():
            form.save()
            email = form.cleaned_data['email'].lower()
            password = form.cleaned_data['password1']
            profile = authenticate(email=email, password=password)
            login(request, profile)
            return redirect('home')

        # if invalid, render form with errors generated by Django
        return render(request, 'registration/signup.html', {'form': form})

    else:
        # form has not been submitted yet
        # check if user is authenticated
        if request.user.is_authenticated:
            return redirect('account')

        # render blank form
        form = ProfileCreationForm()
        return render(request, 'registration/signup.html', {'form': form})


def login_profile(request):
    """
    Handles user login at /accounts/login
    """
    if request.method == 'POST':
        # form was submitted
        form = AuthenticationForm(data=request.POST)
        if form.is_valid():
            email = request.POST['username']
            password = request.POST['password']
            user = authenticate(request, email=email, password=password)
            if user is not None:
                login(request, user)
                return redirect('account')

        # if invalid, render form with errors generated by Django
        return render(request, 'registration/login.html', {'form': form})

    else:
        # form has not been submitted yet
        # if user is already logged in, redirect to their account home page
        if request.user.is_authenticated:
            return redirect('account')

        # render blank form
        form = AuthenticationForm()
        return render(request, 'registration/login.html', {'form': form})


def logout_profile(request):
    """
    Logs out the user and redirects to the website landing page
    """
    logout(request)
    return redirect('/')


@login_required
@ensure_csrf_cookie
def account(request):
    return render(request, 'home.html')  # context


def load_alerts(request):
    profile = Profile.objects.get(email=request.user.email)
    alerts = Alert.objects.filter(user__email__exact=profile.email).order_by('-date_created', 'id')
    data = []
    for obj in alerts:
        item = {
            'id': obj.id,
            'user': obj.user.id,
            'alert': obj.menu_item.item,
            'date': obj.date_created,
        }
        data.append(item)
    return JsonResponse({'data': data})


def delete_alert(request):
    if request.method == 'POST':
        alert_to_delete = Alert.objects.get(pk=request.POST['alert-id'])
        data = {'data': alert_to_delete.delete()}
        return JsonResponse(data)
    else:
        return redirect('account')


def save_alert(request):
    if request.method == 'POST':
        alert_item = request.POST['alert']
        data = {}

        try:
            menu_item = Menu.objects.get(item=alert_item)
        except Menu.DoesNotExist:
            data['success'] = False
            data['message'] = 'This menu item does not exist!'
        else:
            # Check if alert already exists for the user
            if Alert.objects.filter(menu_item_id=menu_item.id, user_id=request.user.id).exists():
                data['success'] = False
                data['message'] = 'This alert has already been added!'

            else:
                saved_alert = Alert.objects.create(menu_item_id=menu_item.id, user_id=request.user.id)

                if saved_alert is not None:
                    # Database operation was successful
                    data['success'] = True
                    data['id'] = saved_alert.id
                    data['alert'] = alert_item
                else:
                    # Something went wrong with create()
                    data['success'] = False
                    data['message'] = 'Something went wrong with saving this alert'
        finally:
            return JsonResponse(data)
    else:
        return redirect('account')
